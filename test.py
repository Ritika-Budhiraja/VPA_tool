import os
import time
import win32com.client
import pythoncom
from pathlib import Path
import logging

# === Configuration ===
EXCEL_FILE_PATH = r"C:\Users\LENOVO\Desktop\VPA\test2.xlsx"
POWERPOINT_FILE_PATH = r"C:\Users\LENOVO\Desktop\VPA\AutoGeneratedPpt.pptx"
SLEEP_INTERVAL = 5  # seconds between checks

# Setup logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('vpa_automation.log', encoding='utf-8'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

class ExcelPowerPointVPA:
    def __init__(self, excel_path, ppt_path):
        self.excel_path = os.path.abspath(excel_path)
        self.ppt_path = os.path.abspath(ppt_path)
        self.excel_app = None
        self.ppt_app = None
        
    def initialize_applications(self):
        """Initialize Excel and PowerPoint applications"""
        try:
            # Initialize COM
            pythoncom.CoInitialize()
            
            # Start Excel application
            self.excel_app = win32com.client.Dispatch("Excel.Application")
            self.excel_app.Visible = False
            self.excel_app.DisplayAlerts = False
            
            # Start PowerPoint application  
            self.ppt_app = win32com.client.Dispatch("PowerPoint.Application")
            self.ppt_app.Visible = 1
            
            logger.info("Applications initialized successfully")
            return True
            
        except Exception as e:
            logger.error(f"❌ Failed to initialize applications: {e}")
            return False
    
    def cleanup_applications(self):
        """Clean up COM objects"""
        try:
            if self.excel_app:
                self.excel_app.Quit()
                self.excel_app = None
            if self.ppt_app:
                self.ppt_app.Quit()
                self.ppt_app = None
            pythoncom.CoUninitialize()
            logger.info("Applications cleaned up successfully")
        except Exception as e:
            logger.error(f"Error during cleanup: {e}")
    
    def get_all_charts_from_excel(self):
        """Extract all charts from Excel with their data"""
        charts_data = []
        wb = None
        
        try:
            # Open Excel workbook
            wb = self.excel_app.Workbooks.Open(self.excel_path)
            logger.info(f"Opened Excel file: {os.path.basename(self.excel_path)}")
            
            # Iterate through all worksheets
            for ws in wb.Worksheets:
                sheet_name = ws.Name
                logger.info(f"Scanning sheet: {sheet_name}")
                
                # Check for embedded chart objects
                chart_objects = ws.ChartObjects()
                logger.info(f"Found {chart_objects.Count} chart objects in {sheet_name}")
                
                for i in range(1, chart_objects.Count + 1):
                    try:
                        chart_obj = chart_objects(i)
                        chart_data = {
                            'sheet_name': sheet_name,
                            'chart_name': chart_obj.Name,
                            'chart_object': chart_obj,
                            'title': self.get_chart_title(chart_obj),
                            'left': chart_obj.Left,
                            'top': chart_obj.Top,
                            'width': chart_obj.Width,
                            'height': chart_obj.Height,
                            'worksheet': ws
                        }
                        charts_data.append(chart_data)
                        logger.info(f"Found chart: '{chart_data['title']}' in sheet '{sheet_name}'")
                        
                    except Exception as e:
                        logger.error(f"Error processing chart {i} in {sheet_name}: {e}")
                
                # Check for chart sheets (dedicated chart sheets)
                for chart_sheet in wb.Charts:
                    try:
                        chart_data = {
                            'sheet_name': chart_sheet.Name,
                            'chart_name': chart_sheet.Name,
                            'chart_sheet': chart_sheet,
                            'title': self.get_chart_sheet_title(chart_sheet),
                            'is_chart_sheet': True
                        }
                        charts_data.append(chart_data)
                        logger.info(f"Found chart sheet: '{chart_data['title']}'")
                        
                    except Exception as e:
                        logger.error(f"Error processing chart sheet {chart_sheet.Name}: {e}")
            
            # Keep workbook open for copying charts
            return charts_data, wb
            
        except Exception as e:
            logger.error(f"Error extracting charts: {e}")
            if wb:
                wb.Close(SaveChanges=False)
            return [], None
    
    def get_chart_title(self, chart_obj):
        """Safely get chart title"""
        try:
            if hasattr(chart_obj.Chart, 'HasTitle') and chart_obj.Chart.HasTitle:
                return chart_obj.Chart.ChartTitle.Text
            else:
                return f"Chart from {chart_obj.Name}"
        except:
            return f"Chart from {chart_obj.Name}"
    
    def get_chart_sheet_title(self, chart_sheet):
        """Safely get chart sheet title"""
        try:
            if hasattr(chart_sheet, 'HasTitle') and chart_sheet.HasTitle:
                return chart_sheet.ChartTitle.Text
            else:
                return f"Chart Sheet: {chart_sheet.Name}"
        except:
            return f"Chart Sheet: {chart_sheet.Name}"
    
    def create_presentation_with_charts(self, charts_data, excel_wb):
        """Create PowerPoint presentation with actual Excel charts"""
        presentation = None
        
        try:
            # Create or open presentation
            if os.path.exists(self.ppt_path):
                presentation = self.ppt_app.Presentations.Open(self.ppt_path)
                logger.info("📂 Opened existing presentation")
            else:
                presentation = self.ppt_app.Presentations.Add()
                logger.info("Created new presentation")
            
            # Clear existing slides
            while presentation.Slides.Count > 0:
                presentation.Slides(1).Delete()
            
            if not charts_data:
                logger.warning("No charts found in Excel file")
                # Create a slide indicating no charts found
                slide = presentation.Slides.Add(1, 1)  # Title slide layout
                slide.Shapes.Title.TextFrame.TextRange.Text = "No Charts Found"
                slide.Shapes.Placeholders(2).TextFrame.TextRange.Text = "No charts were found in the Excel file."
                
            else:
                # Create slides with charts
                for i, chart_data in enumerate(charts_data, 1):
                    logger.info(f"Creating slide {i} for chart: {chart_data['title']}")
                    self.create_slide_with_excel_chart(presentation, chart_data, i, excel_wb)
            
            # Save presentation
            if os.path.exists(self.ppt_path):
                presentation.Save()
            else:
                presentation.SaveAs(self.ppt_path)
            
            logger.info(f"Presentation saved: {os.path.basename(self.ppt_path)}")
            return True
            
        except Exception as e:
            logger.error(f"Error creating presentation: {e}")
            return False
        finally:
            if presentation:
                presentation.Close()
    
    def create_slide_with_excel_chart(self, presentation, chart_data, slide_number, excel_wb):
        """Create a slide with the actual Excel chart"""
        try:
            # Add new slide with blank layout
            slide = presentation.Slides.Add(slide_number, 12)  # 12 = blank layout
            
            # Add title
            title_shape = slide.Shapes.AddTextbox(
                Orientation=1,  # msoTextOrientationHorizontal
                Left=50,
                Top=20,
                Width=650,
                Height=60
            )
            title_shape.TextFrame.TextRange.Text = chart_data['title']
            title_shape.TextFrame.TextRange.Font.Size = 28
            title_shape.TextFrame.TextRange.Font.Bold = True
            title_shape.TextFrame.TextRange.ParagraphFormat.Alignment = 2  # Center alignment
            
            # Method 1: Copy and paste the chart with linking
            success = self.copy_paste_chart_with_link(slide, chart_data, excel_wb)
            
            if not success:
                # Method 2: Try OLE embedding as fallback
                success = self.embed_chart_as_ole(slide, chart_data)
            
            if not success:
                # Method 3: Add placeholder text if all methods fail
                placeholder = slide.Shapes.AddTextbox(1, 100, 150, 600, 300)
                placeholder.TextFrame.TextRange.Text = f"Chart could not be embedded: {chart_data['title']}\nFrom sheet: {chart_data['sheet_name']}"
                placeholder.TextFrame.TextRange.Font.Size = 16
                logger.warning(f"Could not embed chart: {chart_data['title']}")
            
        except Exception as e:
            logger.error(f"Error creating slide {slide_number}: {e}")
    
    def copy_paste_chart_with_link(self, slide, chart_data, excel_wb):
        """Copy chart from Excel and paste with link in PowerPoint"""
        try:
            if 'is_chart_sheet' in chart_data and chart_data['is_chart_sheet']:
                # Handle chart sheet
                chart_sheet = chart_data['chart_sheet']
                chart_sheet.Select()
                chart_sheet.Copy()
            else:
                # Handle embedded chart object
                chart_obj = chart_data['chart_object']
                chart_obj.Select()
                chart_obj.Copy()
            
            # Paste the chart with link in PowerPoint
            try:
                # Try paste special with link
                pasted_shape = slide.Shapes.PasteSpecial(DataType=10, Link=True)  # 10 = ppPasteOLEObject
                
                # Position and resize the chart
                if pasted_shape.Count > 0:
                    chart_shape = pasted_shape(1)
                    chart_shape.Left = 75
                    chart_shape.Top = 100
                    chart_shape.Width = 650
                    chart_shape.Height = 450
                
                logger.info(f"Successfully pasted linked chart: {chart_data['title']}")
                return True
                
            except Exception as e:
                logger.warning(f"Link pasting failed, trying regular paste: {e}")
                # Try regular paste if link paste fails
                pasted_shape = slide.Shapes.Paste()
                
                if pasted_shape.Count > 0:
                    chart_shape = pasted_shape(1)
                    chart_shape.Left = 75
                    chart_shape.Top = 100
                    chart_shape.Width = 650
                    chart_shape.Height = 450
                
                logger.info(f"Successfully pasted chart (without link): {chart_data['title']}")
                return True
                
        except Exception as e:
            logger.error(f"Copy-paste failed for {chart_data['title']}: {e}")
            return False
    
    def embed_chart_as_ole(self, slide, chart_data):
        """Embed chart as OLE object (fallback method)"""
        try:
            # Create OLE object linked to Excel file
            ole_object = slide.Shapes.AddOLEObject(
                Left=75,
                Top=100,
                Width=650,
                Height=450,
                ClassName="Excel.Chart.8",
                FileName=self.excel_path,
                Link=True,
                DisplayAsIcon=False
            )
            
            logger.info(f"Successfully embedded OLE chart: {chart_data['title']}")
            return True
            
        except Exception as e:
            logger.error(f"OLE embedding failed for {chart_data['title']}: {e}")
            return False
    
    def get_file_modified_time(self, file_path):
        """Get file modification time"""
        try:
            return os.path.getmtime(file_path)
        except OSError:
            return 0
    
    def process_excel_and_create_presentation(self):
        """Process Excel file and create/update PowerPoint presentation"""
        try:
            # Extract charts from Excel
            logger.info("Extracting charts from Excel...")
            charts_data, excel_wb = self.get_all_charts_from_excel()
            
            if excel_wb is None:
                logger.error("Failed to open Excel workbook")
                return False
            
            # Create presentation with charts
            logger.info("Creating PowerPoint presentation...")
            success = self.create_presentation_with_charts(charts_data, excel_wb)
            
            # Close Excel workbook
            excel_wb.Close(SaveChanges=False)
            
            return success
            
        except Exception as e:
            logger.error(f"Error in process_excel_and_create_presentation: {e}")
            return False
    
    def monitor_and_update(self):
        """Monitor Excel file for changes and update PowerPoint"""
        logger.info("Starting Excel to PowerPoint VPA System...")
        
        if not self.initialize_applications():
            logger.error("Failed to initialize applications. Exiting.")
            return
        
        try:
            # Get initial file modification time
            last_modified = self.get_file_modified_time(self.excel_path)
            
            # Create initial presentation
            logger.info("Creating initial presentation...")
            if self.process_excel_and_create_presentation():
                logger.info("Initial presentation created successfully!")
            else:
                logger.error("Failed to create initial presentation")
            
            # Start monitoring loop
            logger.info("Monitoring Excel file for changes...")
            print("VPA System is now monitoring your Excel file...")
            print("Make changes to your Excel charts and they will automatically update in PowerPoint!")
            print("Press Ctrl+C to stop monitoring")
            
            while True:
                try:
                    current_modified = self.get_file_modified_time(self.excel_path)
                    
                    if current_modified != last_modified:
                        logger.info("Excel file change detected! Updating presentation...")
                        print("Change detected! Updating PowerPoint...")
                        
                        if self.process_excel_and_create_presentation():
                            logger.info("PowerPoint presentation updated successfully!")
                            print("PowerPoint updated with latest charts!")
                        else:
                            logger.error("Failed to update presentation")
                            print("Failed to update presentation - check logs")
                        
                        last_modified = current_modified
                    
                    time.sleep(SLEEP_INTERVAL)
                    
                except KeyboardInterrupt:
                    logger.info("Monitoring stopped by user")
                    print("\nVPA System stopped. Goodbye!")
                    break
                except Exception as e:
                    logger.error(f"Error in monitoring loop: {e}")
                    time.sleep(SLEEP_INTERVAL)
                    
        finally:
            self.cleanup_applications()

# === Utility Functions ===
def validate_file_paths():
    """Validate that required files exist"""
    if not os.path.exists(EXCEL_FILE_PATH):
        logger.error(f"Excel file not found: {EXCEL_FILE_PATH}")
        print(f"Excel file not found: {EXCEL_FILE_PATH}")
        print("Please make sure your Excel file exists and contains charts!")
        return False
    
    # Create directory for PowerPoint if it doesn't exist
    ppt_dir = os.path.dirname(POWERPOINT_FILE_PATH)
    if not os.path.exists(ppt_dir):
        os.makedirs(ppt_dir)
        logger.info(f"Created directory: {ppt_dir}")
    
    return True

def main():
    """Main function"""
    print("Excel to PowerPoint VPA (Visual Presentation Automation)")
    print("=" * 60)
    print("This system will automatically extract charts from Excel")
    print("and create linked PowerPoint presentations")
    print("Charts will update automatically when Excel data changes")
    print("=" * 60)
    
    # Validate file paths
    if not validate_file_paths():
        input("Press Enter to exit...")
        return
    
    # Create and run VPA system
    vpa = ExcelPowerPointVPA(EXCEL_FILE_PATH, POWERPOINT_FILE_PATH)
    
    try:
        vpa.monitor_and_update()
    except Exception as e:
        logger.error(f"Fatal error: {e}")
        print(f"Fatal error: {e}")
    finally:
        vpa.cleanup_applications()
        input("Press Enter to exit...")

if __name__ == "__main__":
    main()